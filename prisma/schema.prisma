generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String     @id @default(uuid())
  email     String     @unique
  firstname String
  lastname  String
  password  String
  username  String?    @unique
  phone     String?
  location  String?
  image     String?
  bio       String?
  status    UserStatus
  joinedAt  DateTime   @default(now())
  roleId    String
  role      Role       @relation(fields: [roleId], references: [id])
  vendors   Vendors?
  bookings  Bookings[]
}

model Vendors {
  id                  String        @id @default(uuid())
  name                String
  locations           Location[]
  services            Service[]
  description         String?
  image               String?
  phone               String?
  photos              String?
  cancellation_policy String?
  categoryId          String
  category            Category      @relation(fields: [categoryId], references: [id])
  planId              String
  plan                Plans         @relation(fields: [planId], references: [id])
  status              AccountStatus @default(ACTIVE)
  joinedAt            DateTime      @default(now())
  trialEndsAt         DateTime?
  userId              String        @unique
  user                Users         @relation(fields: [userId], references: [id])
  isComplete          Boolean       @default(false)
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  image   String?
  vendors Vendors[]
}

model Plans {
  id          String    @id @default(uuid())
  name        String @unique
  price       Float
  duration    Int
  trial_period Int
  billing_cycle String
  createdAt  DateTime @default(now())
  vendors     Vendors[]
}

model Role {
  id    String  @id @default(cuid())
  name  String  @unique
  users Users[]
}

model Bookings {
  id        String        @id @default(cuid())
  date      DateTime
  createdAt DateTime      @default(now())
  status    BookingStatus @default(PENDING)
  scheduledAt DateTime
  userId    String
  user      Users         @relation(fields: [userId], references: [id])
  serviceId  String
  service    Service       @relation(fields: [serviceId], references: [id])
}

model Invitation {
  id        String   @id @default(uuid())
  email     String   @unique
  token     String
  expiresAt DateTime
  used      Boolean  @default(false)
}
model Location {
  id        String  @id @default(cuid())
  address   String 
  vendorId  String
  vendor    Vendors   @relation(fields: [vendorId], references: [id])
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
}

model Service{
  id        String @id @default(cuid())
  name      String @unique
  description String?
  vendorId  String
  vendor    Vendors @relation(fields: [vendorId],references: [id])
  price     Float
  duration      Int
  booking   Bookings[]
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum AccountStatus {
  TRIAL_ACTIVE
  TRIAL_EXPIRING
  TRIAL_EXPIRED
  ACTIVE
  INACTIVE
  PENDING
}
